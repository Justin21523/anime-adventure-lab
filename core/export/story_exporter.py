# core/export/story_exporter.py
import json
import uuid
from pathlib import Path
from typing import Dict, List, Any, Optional
from dataclasses import dataclass, asdict
from datetime import datetime
import logging
from jinja2 import Template

logger = logging.getLogger(__name__)


@dataclass
class ExportConfig:
    output_dir: str = "../ai_warehouse/outputs/exports"
    include_images: bool = True
    include_metadata: bool = True
    pdf_style: str = "manga"  # manga, novel, comic
    html_interactive: bool = True
    watermark_text: str = "Generated by SagaForge"


@dataclass
class StoryTurn:
    turn_id: int
    user_input: str
    narration: str
    dialogues: List[Dict[str, str]]
    choices: List[str]
    selected_choice: Optional[str]
    background_image: Optional[str]
    character_image: Optional[str]
    timestamp: str
    metadata: Dict[str, Any]


@dataclass
class StorySession:
    session_id: str
    title: str
    world_id: str
    character_name: str
    turns: List[StoryTurn]
    start_time: str
    end_time: Optional[str]
    total_turns: int
    metadata: Dict[str, Any]


class StoryExporter:
    """Export story sessions to various formats"""

    def __init__(self, config: ExportConfig):
        self.config = config
        self.output_dir = Path(config.output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)

        # Load templates
        self.templates = self._load_templates()

    def _load_templates(self) -> Dict[str, Template]:
        """Load Jinja2 templates for different formats"""
        templates = {}

        # HTML template
        html_template = """
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ story.title }} - SagaForge</title>
    <style>
        body { font-family: 'Microsoft JhengHei', sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .story-header { border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
        .turn { margin-bottom: 40px; border-left: 4px solid #007acc; padding-left: 20px; }
        .turn-header { color: #666; font-size: 0.9em; margin-bottom: 10px; }
        .user-input { background: #f0f8ff; padding: 15px; border-radius: 8px; margin-bottom: 15px; }
        .narration { line-height: 1.8; margin-bottom: 15px; }
        .dialogue { background: #fff8dc; padding: 10px 15px; margin: 10px 0; border-radius: 5px; border-left: 3px solid #ddd; }
        .choices { margin-top: 15px; }
        .choice { background: #f9f9f9; padding: 8px 12px; margin: 5px 0; border-radius: 4px; cursor: pointer; }
        .choice.selected { background: #d4edda; border-left: 3px solid #28a745; }
        .images { display: flex; gap: 15px; margin: 15px 0; }
        .image-container { flex: 1; text-align: center; }
        .image-container img { max-width: 100%; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); }
        .metadata { font-size: 0.8em; color: #888; margin-top: 30px; }
    </style>
</head>
<body>
    <div class="story-header">
        <h1>{{ story.title }}</h1>
        <p><strong>世界:</strong> {{ story.world_id }} | <strong>角色:</strong> {{ story.character_name }}</p>
        <p><strong>開始時間:</strong> {{ story.start_time }} | <strong>回合數:</strong> {{ story.total_turns }}</p>
    </div>

    {% for turn in story.turns %}
    <div class="turn">
        <div class="turn-header">第 {{ turn.turn_id }} 回合 - {{ turn.timestamp }}</div>

        <div class="user-input">
            <strong>玩家輸入:</strong> {{ turn.user_input }}
        </div>

        <div class="narration">{{ turn.narration | replace('\n', '<br>') }}</div>

        {% for dialogue in turn.dialogues %}
        <div class="dialogue">
            <strong>{{ dialogue.character }}:</strong> {{ dialogue.text }}
        </div>
        {% endfor %}

        {% if turn.background_image or turn.character_image %}
        <div class="images">
            {% if turn.background_image %}
            <div class="image-container">
                <img src="{{ turn.background_image }}" alt="背景圖">
                <div>背景</div>
            </div>
            {% endif %}
            {% if turn.character_image %}
            <div class="image-container">
                <img src="{{ turn.character_image }}" alt="角色圖">
                <div>角色</div>
            </div>
            {% endif %}
        </div>
        {% endif %}

        {% if turn.choices %}
        <div class="choices">
            <strong>選項:</strong>
            {% for choice in turn.choices %}
            <div class="choice {% if choice == turn.selected_choice %}selected{% endif %}">
                {{ loop.index }}. {{ choice }}
            </div>
            {% endfor %}
        </div>
        {% endif %}
    </div>
    {% endfor %}

    <div class="metadata">
        <p>{{ config.watermark_text }} - {{ datetime.now().strftime('%Y-%m-%d %H:%M:%S') }}</p>
    </div>
</body>
</html>
        """

        templates["html"] = Template(html_template)
        return templates

    def export_to_json(self, story: StorySession) -> str:
        """Export story to JSON format"""
        export_path = self.output_dir / f"{story.session_id}_story.json"

        export_data = {
            "format": "SagaForge Story Export v1.0",
            "exported_at": datetime.now().isoformat(),
            "story": asdict(story),
            "config": asdict(self.config),
        }

        with open(export_path, "w", encoding="utf-8") as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2)

        logger.info(f"Exported story to JSON: {export_path}")
        return str(export_path)

    def export_to_html(self, story: StorySession) -> str:
        """Export story to interactive HTML"""
        export_path = self.output_dir / f"{story.session_id}_story.html"

        # Render HTML template
        html_content = self.templates["html"].render(
            story=story, config=self.config, datetime=datetime
        )

        with open(export_path, "w", encoding="utf-8") as f:
            f.write(html_content)

        logger.info(f"Exported story to HTML: {export_path}")
        return str(export_path)

    def export_to_pdf(self, story: StorySession) -> str:
        """Export story to PDF (manga style)"""
        try:
            from weasyprint import HTML, CSS
        except ImportError:
            logger.error("weasyprint not installed, cannot export PDF")
            raise ImportError("Please install weasyprint: pip install weasyprint")

        # Generate HTML first
        html_path = self.export_to_html(story)
        export_path = self.output_dir / f"{story.session_id}_story.pdf"

        # Custom CSS for PDF
        pdf_css = CSS(
            string="""
            @page { margin: 2cm; }
            body { font-size: 12pt; }
            .turn { page-break-inside: avoid; }
            .images img { max-height: 15cm; }
        """
        )

        # Convert to PDF
        HTML(filename=html_path).write_pdf(
            target=str(export_path), stylesheets=[pdf_css]
        )

        logger.info(f"Exported story to PDF: {export_path}")
        return str(export_path)

    def load_from_json(self, json_path: str) -> StorySession:
        """Load story from JSON export"""
        with open(json_path, "r", encoding="utf-8") as f:
            data = json.load(f)

        story_data = data["story"]

        # Reconstruct turns
        turns = []
        for turn_data in story_data["turns"]:
            turn = StoryTurn(**turn_data)
            turns.append(turn)

        # Reconstruct story
        story_data["turns"] = turns
        story = StorySession(**story_data)

        logger.info(f"Loaded story from JSON: {json_path}")
        return story

    def create_story_archive(self, story: StorySession) -> str:
        """Create complete archive with all formats and images"""
        import zipfile
        import shutil

        archive_name = f"{story.session_id}_complete"
        archive_dir = self.output_dir / archive_name
        archive_dir.mkdir(exist_ok=True)

        # Export all formats
        json_path = self.export_to_json(story)
        html_path = self.export_to_html(story)

        # Copy to archive
        shutil.copy2(json_path, archive_dir / "story.json")
        shutil.copy2(html_path, archive_dir / "story.html")

        # Copy images if available
        if self.config.include_images:
            images_dir = archive_dir / "images"
            images_dir.mkdir(exist_ok=True)

            for turn in story.turns:
                if turn.background_image and Path(turn.background_image).exists():
                    shutil.copy2(
                        turn.background_image,
                        images_dir / f"bg_turn_{turn.turn_id}.png",
                    )
                if turn.character_image and Path(turn.character_image).exists():
                    shutil.copy2(
                        turn.character_image,
                        images_dir / f"char_turn_{turn.turn_id}.png",
                    )

        # Create ZIP archive
        zip_path = self.output_dir / f"{archive_name}.zip"
        with zipfile.ZipFile(zip_path, "w", zipfile.ZIP_DEFLATED) as zipf:
            for file_path in archive_dir.rglob("*"):
                if file_path.is_file():
                    zipf.write(file_path, file_path.relative_to(archive_dir))

        # Cleanup temp directory
        shutil.rmtree(archive_dir)

        logger.info(f"Created story archive: {zip_path}")
        return str(zip_path)
