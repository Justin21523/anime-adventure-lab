# .github/workflows/comprehensive-test.yml
name: Comprehensive Backend Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: "0 2 * * *" # 每天凌晨2點運行完整測試

env:
  AI_CACHE_ROOT: /tmp/github_test_cache

jobs:
  test-matrix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        test-type: ["unit", "integration", "e2e"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ${{ env.AI_CACHE_ROOT }}
          key: ${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Setup test cache
        run: |
          mkdir -p ${{ env.AI_CACHE_ROOT }}/{hf,torch,models,datasets,outputs}
          mkdir -p ${{ env.AI_CACHE_ROOT }}/models/{lora,blip2,qwen,llava,embeddings}

      - name: Run health check
        run: python scripts/health_check.py

      - name: Run ${{ matrix.test-type }} tests
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              python -m pytest tests/test_core_modules.py -v --tb=short --junitxml=test-results-${{ matrix.test-type }}.xml
              ;;
          esac

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}-${{ matrix.test-type }}
          path: test-results-*.xml

      - name: Generate coverage report
        if: matrix.test-type == 'unit' && matrix.python-version == '3.10'
        run: |
          pip install pytest-cov
          python -m pytest tests/test_core_modules.py --cov=backend --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        if: matrix.test-type == 'unit' && matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  performance-test:
    runs-on: ubuntu-latest
    needs: test-matrix
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Setup test environment
        run: |
          mkdir -p ${{ env.AI_CACHE_ROOT }}/{hf,torch,models,datasets,outputs}
          bash scripts/setup_test_environment.sh

      - name: Run performance tests
        run: |
          python -m pytest tests/test_performance.py -v -m slow --tb=short

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: test_results/

  docker-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build test Docker image
        run: docker build -f docker/Dockerfile.test -t multimodal-lab-test .

      - name: Run tests in Docker
        run: |
          docker run --rm \
            -v $(pwd)/test_results:/app/test_results \
            multimodal-lab-test \
            python -m pytest tests/ -v --tb=short --junitxml=/app/test_results/docker-junit.xml

      - name: Upload Docker test results
        uses: actions/upload-artifact@v3
        with:
          name: docker-test-results
          path: test_results/docker-junit.xml
