version: '3.9'

services:
  # PostgreSQL with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: saga-postgres
    environment:
      POSTGRES_DB: sagaforge
      POSTGRES_USER: saga
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-saga123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saga -d sagaforge"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    container_name: saga-redis
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # MinIO for file storage (optional)
  minio:
    image: minio/minio:latest
    container_name: saga-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-sagaforge}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-sagaforge123}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # FastAPI backend
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: saga-api
    environment:
      - AI_CACHE_ROOT=/warehouse/cache
      - DATABASE_URL=postgresql://saga:${POSTGRES_PASSWORD:-saga123}@postgres:5432/sagaforge
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_USER:-sagaforge}
      - MINIO_SECRET_KEY=${MINIO_PASSWORD:-sagaforge123}
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      - API_CORS_ORIGINS=http://localhost:7860,http://localhost:3000
    volumes:
      - ${AI_CACHE_ROOT:-./ai_warehouse/cache}:/warehouse/cache
      - ./configs:/app/configs:ro
      - ./worldpacks:/app/worldpacks:ro
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Celery worker for background tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: saga-worker
    environment:
      - AI_CACHE_ROOT=/warehouse/cache
      - DATABASE_URL=postgresql://saga:${POSTGRES_PASSWORD:-saga123}@postgres:5432/sagaforge
      - REDIS_URL=redis://redis:6379/0
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
    volumes:
      - ${AI_CACHE_ROOT:-./ai_warehouse/cache}:/warehouse/cache
      - ./configs:/app/configs:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    command: celery -A workers.celery_app worker --loglevel=INFO --concurrency=2
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Celery flower for monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: saga-flower
    environment:
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
    command: celery -A workers.celery_app flower --port=5555
    restart: unless-stopped

  # Gradio Web UI
  webui:
    build:
      context: .
      dockerfile: Dockerfile.webui
    container_name: saga-webui
    environment:
      - API_BASE_URL=http://api:8000
      - GRADIO_SERVER_NAME=0.0.0.0
      - GRADIO_SERVER_PORT=7860
    ports:
      - "7860:7860"
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7860"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: saga-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - webui
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  default:
    name: sagaforge-network